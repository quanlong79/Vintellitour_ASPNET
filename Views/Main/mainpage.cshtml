@{
    ViewData["Title"] = "Bản đồ Việt Nam";
}
//fix
< !DOCTYPE html >
< html lang = "vi" >
< head >
    < meta charset = "utf-8" />
    < title > @ViewData["Title"] </ title >

    < !--Leaflet CDN-- >
    < link rel = "stylesheet" href = "https://unpkg.com/leaflet/dist/leaflet.css" />
    < script src = "https://unpkg.com/leaflet/dist/leaflet.js" ></ script >

    < !--Pulse Icon-- >
    < link rel = "stylesheet" href = "~/lib/plugins/L.Icon.Pulse.css" />
    < script src = "~/lib/plugins/L.Icon.Pulse.js" ></ script >

    < style >
        * {
    box - sizing: border - box;
}

html, body {
            margin: 0;
padding: 0;
height: 100 %;
width: 100 %;
font - family: Arial, sans-serif;
overflow: hidden;
        }

        #container {
            display: flex;
height: 100vh;
width: 100vw;
        }

        .left - content {
flex: 2;
    background - color: #f0f4f8;
            padding: 24px;
    box - sizing: border - box;
overflow: auto;
}

# map {
flex: 1;
position: relative;
height: 100 %;
width: 100 %;
overflow: hidden;
        }

        #leaflet-map {
            position: absolute;
top: 0;
bottom: 0;
right: 0;
left: 0;
width: 100 %;
height: 100 %;
        }

        #searchBox {
            position: absolute;
top: 20px;
left: 70px; /* <-- tăng từ 20px để tránh chạm cụm nút zoom */
z - index: 1000;
width: 75 %;
padding: 10px 16px;
font - size: 16px;
border - radius: 8px;
border: 1px solid #ccc;
            background-color: white;
box - shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        #suggestionList {
            position: absolute;
top: 65px;
left: 70px; /* <-- đồng bộ với searchBox */
z - index: 1000;
background - color: white;
width: 75 %;
border: 1px solid #ccc;
            border-radius: 8px;
max - height: 200px;
overflow - y: auto;
box - shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
list - style: none;
padding: 0;
margin: 0;
        }

            #suggestionList li {
                padding: 10px 16px;
cursor: pointer;
border - bottom: 1px solid #eee;
            }

                #suggestionList li:hover {
                    background - color: #f1f1f1;
                }

        #btnBack {
            position: absolute;
top: 20px;
right: 20px;
z - index: 1000;
background - color: #007bff;
            color: white;
border: none;
padding: 10px 20px;
border - radius: 8px;
cursor: pointer;
font - size: 16px;
box - shadow: 0 4px 10px rgba(0, 123, 255, 0.4);
display: none;
        }
    </ style >

</ head >

< body >
    < div id = "container" >
        < !--Nội dung bên trái -->
        <div class= "left-content" >
            < h2 > Nội dung của bạn ở đây</h2>
            <p>Bạn có thể đặt mô tả, danh sách tỉnh, bài viết, hình ảnh,...</p>
        </div>

        <!-- Bản đồ bên phải -->
        <div id="map">
            <input type="text" id="searchBox" placeholder="Tìm kiếm tỉnh" />
            <ul id="suggestionList"></ul>
            <button id="btnBack" onclick="resetMap()">Back</button>
            <div id="leaflet-map"></div>
        </div>
    </div>

    <script>
        let map, geojsonLayer, originalStyles = { }, clickedGid = null;

function initMap()
{
    map = L.map("leaflet-map").setView([14.0583, 108.2772], 5);

    L.tileLayer("https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=RCfpOibQtfADVJ8TBhgS", {
    attribution: '&copy; <a href="https://www.maptiler.com/">MapTiler</a>',
            }).addTo(map);

    fetch("/province.json")
        .then(res => res.json())
        .then(data => {
        geojsonLayer = L.geoJSON(data, {
        onEachFeature: (feature, layer) => {
        const name = feature.properties.ten_tinh;
        const gid = feature.properties.gid;

        originalStyles[name] = {
        color: "#ff7800",
                                fillColor: "#ff0000",
                                fillOpacity: 0.4

                    }
        ;

        const popup = `

                        < div style = "font-family: Arial; padding: 8px;" >

                            < h3 style = "margin-bottom: 8px; font-size: 20px;" >${ name}</ h3 >
                                    ${ gid ? `< p style = "font-size: 14px;" >< strong > Mã tỉnh:</ strong > ${ gid}</ p >` : ""}
                                    < a href = "#" style = "display: inline-block; padding: 8px 16px; background-color: #28a745; color: white; text-decoration: none; border-radius: 8px;" >
                                        Xem thông tin và tham quan
                                    </a>
                                </div>
                            `;
layer.bindPopup(popup);

layer.on("click", () => handleProvinceClick(layer, feature));
                        },
                        style: () => ({
color: "#ff7800",
                            fillColor: "#ff0000",
                            fillOpacity: 0.4
                        })
                    }).addTo(map);
                });
        }

        function handleProvinceClick(layer, feature)
{
    const name = feature.properties.ten_tinh;
    const gid = feature.properties.gid;
    clickedGid = gid;

    map.setView(layer.getBounds().getCenter(), 8);
    disableMapInteractions();

    geojsonLayer.eachLayer(l => {
    if (l !== layer)
    {
        l.setStyle({ fillColor: "#ffffff", color: "#ffffff" });
}
            });

layer.setStyle({ fillColor: "#ff0000", color: "#ff7800" });
layer.openPopup();

document.getElementById("btnBack").style.display = "block";
        }

        function disableMapInteractions()
{
    map.dragging.disable();
    map.scrollWheelZoom.disable();
}

function enableMapInteractions()
{
    map.dragging.enable();
    map.scrollWheelZoom.enable();
}

function resetMap()
{
    map.setView([14.0583, 108.2772], 5);
    enableMapInteractions();
    clickedGid = null;

    geojsonLayer.eachLayer(layer => {
        const name = layer.feature.properties.ten_tinh;
        const style = originalStyles[name];
        layer.setStyle(style);
        layer.closePopup();
    });

    document.getElementById("btnBack").style.display = "none";
}

document.getElementById("searchBox").addEventListener("input", function() {
    const query = this.value.toLowerCase();
    const suggestions = [];

    geojsonLayer.eachLayer(layer => {
        const name = layer.feature.properties.ten_tinh;
        if (name.toLowerCase().includes(query))
        {
            suggestions.push(name);
        }
    });

    const list = document.getElementById("suggestionList");
    list.innerHTML = "";
    suggestions.forEach(name => {
        const li = document.createElement("li");
        li.textContent = name;
        li.onclick = () => {
            const targetLayer = geojsonLayer.getLayers().find(l => l.feature.properties.ten_tinh === name);
            if (targetLayer) handleProvinceClick(targetLayer, targetLayer.feature);
            list.innerHTML = "";
        };
        list.appendChild(li);
    });
});

window.onload = initMap;
    </ script >
</ body >
</ html >
